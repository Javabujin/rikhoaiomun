/*
 * This source file was generated by the Gradle 'init' task
 */
package org.javabujin.rikhoaiomun;

import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Objects;
import java.util.logging.Logger;
import org.antlr.v4.runtime.*;
import org.javabujin.rikhoaiomun.antlr.generated.RikhoaiomunLexer;
import org.javabujin.rikhoaiomun.antlr.generated.RikhoaiomunParser;
import org.javabujin.rikhoaiomun.antlr.generated.RikhoaiomunParser.SpecificationContext;
import org.javabujin.rikhoaiomun.antlr.generator.CodeGeneratorVisitor;

public class App {
    public static void main(String[] args) {
        // Use a logger as to-screen output.
        Logger logger = Logger.getLogger(App.class.getName());

        // Run the lexer on the example input file.
        try {
            // Use the class loader to get the resource as a stream.
            InputStream inputStream = Objects.requireNonNull(
                    App.class.getResourceAsStream("exampleInputs/input2.txt"));

            // 1) Lex and parse
            CharStream input = CharStreams.fromStream(inputStream);
            RikhoaiomunLexer lexer = new RikhoaiomunLexer(input);
            CommonTokenStream tokens = new CommonTokenStream(lexer);
            RikhoaiomunParser parser = new RikhoaiomunParser(tokens);
            RikhoaiomunParser.SpecificationContext tree = parser.specification();

            // 2) Visit and generate code
            Path outputDir = Paths.get("generatedRikhoaiomun");
            Files.createDirectories(outputDir);
            CodeGeneratorVisitor gen = new CodeGeneratorVisitor(outputDir);
            gen.visit(tree);

            System.out.println("Code generation complete. Output in: " + outputDir);
        } catch (Exception e) {
            logger.info("An error occurred.");
            e.printStackTrace();
        }
    }
}
